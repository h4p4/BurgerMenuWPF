<Window x:Class="burger_wpf.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:burger_wpf"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800"
        WindowState="Maximized" Foreground="#e2e2e2"
        FontSize="22" FontFamily="Whitney">
    <Window.Resources>
        <Style x:Key="CustomButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Foreground" Value="{DynamicResource LightTextColor}"/>
            <Setter Property="Foreground" Value="{DynamicResource LightTextColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Content}" TextAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource ButtonMouseOverColor}"/>
                    <Setter Property="Foreground" Value="{DynamicResource DarkTextColor}"/>
                </Trigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Background" Value="{DynamicResource ButtonFocusedColor}"/>
                    <Setter Property="Foreground" Value="{DynamicResource DarkTextColor}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="MenuButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CustomButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="15">
                            <TextBlock Text="{TemplateBinding Content}" TextAlignment="Center"
                                       TextWrapping="Wrap" Width="Auto" Margin="20"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ToggleMenuButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CustomButton}">
            <Setter Property="Width" Value="50"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="50" Width="Auto">
                            <TextBlock Text="{TemplateBinding Content}" TextAlignment="Center" Margin="10"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource ButtonMouseOverColor}"/>
                    <Setter Property="Foreground" Value="{DynamicResource DarkTextColor}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <ToggleButton x:Name="toggleButton" Content="Изменить ширину"/>

        <Grid x:Name="myGrid" Grid.Column="1" Width="200" Background="LightBlue">
            <!-- Содержимое вашего грида -->
        </Grid>

        <Grid.Triggers>
            <EventTrigger RoutedEvent="ToggleButton.Checked" SourceName="toggleButton">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="myGrid" Storyboard.TargetProperty="Width" Duration="0:0:0.3" From="200" To="0">
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="ToggleButton.Unchecked" SourceName="toggleButton">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="myGrid" Storyboard.TargetProperty="Width" Duration="0:0:0.3" From="0" To="200">
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Grid.Triggers>

    </Grid>

</Window>
